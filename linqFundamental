/*
Sure! Let's create a thorough set of LINQ practice exercises. Instead of cars, let's use a dataset of books and authors 
for these exercises. Here's a brief overview of the dataset we'll use:

Author : AuthorId (int) Name (string) Country (string)

Book : BookId (int) Title (string) AuthorId (int) PublicationYear (int) Genre (string) Price (decimal)

Exercise 1: Introduction and IEnumerable
Question: Create an IEnumerable collection of authors and books. Write a LINQ query to list all book titles and their 
corresponding authors. Answer:
*/
var answer1 = {
    var authors = new List<Author>
    {
        new Author { AuthorId = 1, Name = "George Orwell", Country = "United Kingdom" },
        new Author { AuthorId = 2, Name = "J.K. Rowling", Country = "United Kingdom" },
        new Author { AuthorId = 3, Name = "Stephen King", Country = "United States" }
    };

    var books = new List<Book>
    {
        new Book { BookId = 1, Title = "1984", AuthorId = 1, PublicationYear = 1949, Genre = "Dystopian", Price = 9.99m },
        new Book { BookId = 2, Title = "Harry Potter and the Philosopher's Stone", AuthorId = 2, PublicationYear = 1997, Genre = "Fantasy", Price = 8.99m },
        new Book { BookId = 3, Title = "The Shining", AuthorId = 3, PublicationYear = 1977, Genre = "Horror", Price = 7.99m }
    };

    var bookTitlesWithAuthors = from book in books
                                join author in authors on book.AuthorId equals author.AuthorId
                                select new { book.Title, author.Name };

    foreach (var item in bookTitlesWithAuthors)
    {
        Console.WriteLine($"{item.Title} by {item.Name}");
    }
}

/*
Exercise 2: Creating an Extension Method
Question: Create an extension method IsFromUnitedKingdom for the Author class to check if the author is from the United Kingdom. 
Use it in a LINQ query to list all books by UK authors. Answer:
*/

var answer2 = {
    public static class AuthorExtensions
        {
            public static bool IsFromUnitedKingdom(this Author author)
            {
                return author.Country == "United Kingdom";
            }
        }

        var booksByUkAuthors = from book in books
                            join author in authors on book.AuthorId equals author.AuthorId
                            where author.IsFromUnitedKingdom()
                            select new { book.Title, author.Name };

        foreach (var item in booksByUkAuthors)
        {
            Console.WriteLine($"{item.Title} by {item.Name}");
        }
}

/*
Exercise 3: Understanding Lambda Expression
Question: Use lambda expressions to filter books published after the year 1980 and project their titles. Answer:
*/
var answer3 = {
    var recentBooks = books.Where(b => b.PublicationYear > 1980)
                       .Select(b => b.Title);

    foreach (var title in recentBooks)
    {
        Console.WriteLine(title);
    }
}

/*
Exercise 4: Using Func and Action Types
Question: Create a Func<Book, bool> to filter books of the genre "Fantasy" and an Action<string> to print the book titles. Answer:
*/

var answer4 = 
{
        Func<Book, bool> isFantasy = b => b.Genre == "Fantasy";
        Action<string> printTitle = title => Console.WriteLine(title);

        var fantasyBooks = books.Where(isFantasy)
                                .Select(b => b.Title);

        foreach (var title in fantasyBooks)
        {
            printTitle(title);
        }
}

/*
Exercise 5: Using var for Implicit Typing
Question: Use implicit typing with var in a LINQ query to list all books with their publication years. Answer:
*/

var answer5 = {
    var bookTitlesWithYears = from book in books
                          select new { book.Title, book.PublicationYear };

    foreach (var item in bookTitlesWithYears)
    {
        Console.WriteLine($"{item.Title} published in {item.PublicationYear}");
    }
}

/*
Exercise 6: Query Syntax vs Method Syntax
Question: Write a LINQ query using both query syntax and method syntax to list all authors' names in alphabetical order. Answer:
*/

var answer6 = {
    // Query syntax
    var authorsByNameQuery = from author in authors
                            orderby author.Name
                            select author.Name;

    // Method syntax
    var authorsByNameMethod = authors.OrderBy(a => a.Name)
                                    .Select(a => a.Name);

    Console.WriteLine("Query Syntax:");
    foreach (var name in authorsByNameQuery)
    {
        Console.WriteLine(name);
    }

    Console.WriteLine("Method Syntax:");
    foreach (var name in authorsByNameMethod)
    {
        Console.WriteLine(name);
    }
}

/*
Exercise 7: Creating a Custom Filter Operator
Question: Create a custom filter operator FilterByPrice to filter books with a price less than a given value. Answer:
*/

var answer7 = {
    public static class BookExtensions
    {
        public static IEnumerable<Book> FilterByPrice(this IEnumerable<Book> books, decimal maxPrice)
        {
            foreach (var book in books)
            {
                if (book.Price < maxPrice)
                {
                    yield return book;
                }
            }
        }
    }

    var affordableBooks = books.FilterByPrice(9.00m);

    foreach (var book in affordableBooks)
    {
        Console.WriteLine($"{book.Title} - {book.Price:C}");
    }

}

/*
Exercise 8: Creating an Operator with Yield Return
Question: Create a custom operator GetBooksByGenre using yield return to filter books by genre. Answer:
*/

var answer8 = {
    public static class BookExtensions
    {
        public static IEnumerable<Book> GetBooksByGenre(this IEnumerable<Book> books, string genre)
        {
            foreach (var book in books)
            {
                if (book.Genre == genre)
                {
                    yield return book;
                }
            }
        }
    }

    var horrorBooks = books.GetBooksByGenre("Horror");

    foreach (var book in horrorBooks)
    {
        Console.WriteLine(book.Title);
    }

}

/*
Exercise 9: Deferred Execution
Question: Explain deferred execution and demonstrate it with a LINQ query that filters books by price. Answer:
*/

var answer9 = {
    // Deferred execution means that the query is not executed until the results are actually requested.

    var cheapBooksQuery = books.Where(b => b.Price < 9.00m);

    // The query above is not executed yet. It will be executed when we iterate over the result.
    foreach (var book in cheapBooksQuery)
    {
        Console.WriteLine($"{book.Title} - {book.Price:C}");
    }

}

/*
Exercise 10: Exceptions and Deferred Queries
Question: Demonstrate how deferred execution can result in exceptions being thrown when iterating over the query results. Answer:
*/

var answer10 = {
    var invalidPriceBooksQuery = books.Where(b => b.Price < 0);

    // This query will not throw an exception until we iterate over the results.
    try
    {
        foreach (var book in invalidPriceBooksQuery)
        {
            Console.WriteLine(book.Title);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Exception: {ex.Message}");
    }

}

/*
Exercise 11: All About Streaming Operators
Question: Explain the concept of streaming operators in LINQ and write a query that demonstrates a streaming operator in 
action by filtering and selecting book titles under $10. Answer:
*/

var answer11 = {
    // Streaming operators process elements one at a time and return results incrementally.

    var affordableBooks = books.Where(b => b.Price < 10).Select(b => b.Title);

    foreach (var title in affordableBooks)
    {
        Console.WriteLine(title);
    }

}

/*
Exercise 12: How to Process a CSV File with LINQ
Question: Create a LINQ query to process a CSV string containing book data and list the book titles. Answer:
*/

var answer12 = {
    var csvData = "BookId,Title,AuthorId,PublicationYear,Genre,Price\n" +
              "1,1984,1,1949,Dystopian,9.99\n" +
              "2,Harry Potter and the Philosopher's Stone,2,1997,Fantasy,8.99\n" +
              "3,The Shining,3,1977,Horror,7.99";

    var lines = csvData.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
    var header = lines.First();
    var booksFromCsv = lines.Skip(1)
                            .Select(line => line.Split(','))
                            .Select(parts => new Book
                            {
                                BookId = int.Parse(parts[0]),
                                Title = parts[1],
                                AuthorId = int.Parse(parts[2]),
                                PublicationYear = int.Parse(parts[3]),
                                Genre = parts[4],
                                Price = decimal.Parse(parts[5])
                            });

    foreach (var book in booksFromCsv)
    {
        Console.WriteLine(book.Title);
    }

}

/*
Exercise 13: Implementing a File Processor
Question: Write a method to process a file containing book data and return a list of books using LINQ. Answer:
*/

var answer13 = {
    public static IEnumerable<Book> ProcessBookFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);
        return lines.Skip(1)
                    .Select(line => line.Split(','))
                    .Select(parts => new Book
                    {
                        BookId = int.Parse(parts[0]),
                        Title = parts[1],
                        AuthorId = int.Parse(parts[2]),
                        PublicationYear = int.Parse(parts[3]),
                        Genre = parts[4],
                        Price = decimal.Parse(parts[5])
                    }).ToList();
    }

    // Example usage (assuming the file exists):
    var booksFromFile = ProcessBookFile("books.csv");
    foreach (var book in booksFromFile)
    {
        Console.WriteLine(book.Title);
    }

}

/*
Exercise 14: Filtering with Where and First
Question: Use the Where and First methods to find the first book that is a horror genre. Answer:
*/

var answer14 = {
    var firstHorrorBook = books.Where(b => b.Genre == "Horror").First();

    Console.WriteLine(firstHorrorBook.Title);
}

/*
Exercise 15: Quantifying Data with Any, All, and Contains
Question: Use Any, All, and Contains to perform the following checks:

Check if there are any books by "Stephen King".

Check if all books are priced below $15.

Check if the list contains a book titled "1984". Answer:
*/

var answer15 = {
    var hasStephenKingBooks = books.Any(b => b.AuthorId == 3);
    Console.WriteLine($"Any books by Stephen King: {hasStephenKingBooks}");

    var areAllBooksAffordable = books.All(b => b.Price < 15);
    Console.WriteLine($"All books priced below $15: {areAllBooksAffordable}");

    var contains1984 = books.Select(b => b.Title).Contains("1984");
    Console.WriteLine($"Contains '1984': {contains1984}");

}

/*
Exercise 16: Projecting Data with Select
Question: Use the Select method to project the titles and genres of all books. Answer
*/

var answer16 = {
    var bookDetails = books.Select(b => new { b.Title, b.Genre });

    foreach (var detail in bookDetails)
    {
        Console.WriteLine($"{detail.Title} - {detail.Genre}");
    }

}

/*
Exercise 17: Flattening Data with SelectMany
Question: Use SelectMany to flatten a collection of authors, each with a list of books, into a single collection of book titles. 
Answer:
*/
var answer17 ={
    var authorsWithBooks = new List<AuthorWithBooks>
        {
            new AuthorWithBooks 
            { 
                Author = new Author { AuthorId = 1, Name = "George Orwell", Country = "United Kingdom" },
                Books = new List<Book> { new Book { BookId = 1, Title = "1984", AuthorId = 1, PublicationYear = 1949, Genre = "Dystopian", Price = 9.99m } }
            },
            new AuthorWithBooks 
            { 
                Author = new Author { AuthorId = 2, Name = "J.K. Rowling", Country = "United Kingdom" },
                Books = new List<Book> { new Book { BookId = 2, Title = "Harry Potter and the Philosopher's Stone", AuthorId = 2, PublicationYear = 1997, Genre = "Fantasy", Price = 8.99m } }
            }
        };

    var allBookTitles = authorsWithBooks.SelectMany(a => a.Books.Select(b => b.Title));

    foreach (var title in allBookTitles)
    {
        Console.WriteLine(title);
    }
}

/*
Exercise 18: Joining Data with Query Syntax
Question: Use query syntax to join authors and books and list all book titles with their authors' names. Answer:
*/

var answer18 = {
    var bookAuthorsQuery = from book in books
                       join author in authors on book.AuthorId equals author.AuthorId
                       select new { book.Title, author.Name };

    foreach (var item in bookAuthorsQuery)
    {
        Console.WriteLine($"{item.Title} by {item.Name}");
    }

}

/*
Exercise 19: Joining Data with Method Syntax
Question: Use method syntax to join authors and books and list all book titles with their authors' names. Answer:
*/
var answer19 = {
    var bookAuthorsMethod = books.Join(authors,
                                   book => book.AuthorId,
                                   author => author.AuthorId,
                                   (book, author) => new { book.Title, author.Name });

    foreach (var item in bookAuthorsMethod)
    {
        Console.WriteLine($"{item.Title} by {item.Name}");
    }

}

/*
Exercise 20: Creating a Join with Composite Key
Question: Write a query to join books and a list of publishers using a composite key (AuthorId and PublicationYear). Answer:
*/

var answer20 = {
    var publishers = new List<Publisher>
    {
        new Publisher { AuthorId = 1, PublicationYear = 1949, PublisherName = "Secker & Warburg" },
        new Publisher { AuthorId = 2, PublicationYear = 1997, PublisherName = "Bloomsbury" },
        new Publisher { AuthorId = 3, PublicationYear = 1977, PublisherName = "Doubleday" }
    };

    var bookPublishers = books.Join(publishers,
                                    book => new { book.AuthorId, book.PublicationYear },
                                    publisher => new { publisher.AuthorId, publisher.PublicationYear },
                                    (book, publisher) => new { book.Title, publisher.PublisherName });

    foreach (var item in bookPublishers)
    {
        Console.WriteLine($"{item.Title} published by {item.PublisherName}");
    }

}

/*
Exercise 21: Grouping Data
Question: Use LINQ to group books by their genre and list the genres with the number of books in each. Answer:
*/

var answer21 = {
    var booksByGenre = books.GroupBy(b => b.Genre)
                        .Select(g => new { Genre = g.Key, Count = g.Count() });

    foreach (var genre in booksByGenre)
    {
        Console.WriteLine($"{genre.Genre}: {genre.Count} books");
    }

}

/*
Exercise 22: Using GroupJoin for Hierarchical Data
Question: Use GroupJoin to list authors and their books. Answer:
*/

var answer22 = {
    var authorsWithBooks = authors.GroupJoin(books,
                                         author => author.AuthorId,
                                         book => book.AuthorId,
                                         (author, booksGroup) => new { AuthorName = author.Name, Books = booksGroup });

    foreach (var author in authorsWithBooks)
    {
        Console.WriteLine($"{author.AuthorName}:");
        foreach (var book in author.Books)
        {
            Console.WriteLine($"  - {book.Title}");
        }
    }

}

/*
Exercise 23: Aggregating Data
Question: Use LINQ to calculate the total price of all books. Answer:
*/

var answer23 = {
    var totalBookPrice = books.Sum(b => b.Price);

    Console.WriteLine($"Total price of all books: {totalBookPrice:C}");
}

/*
Exercise 24: Efficient Aggregation with Extension Method
Question: Create an extension method CalculateTotalPrice to calculate the total price of a collection of books. Answer:
*/

var answer24 = {
    public static class BookExtensions
    {
        public static decimal CalculateTotalPrice(this IEnumerable<Book> books)
        {
            return books.Sum(b => b.Price);
        }
    }

    var totalBookPrice = books.CalculateTotalPrice();

    Console.WriteLine($"Total price of all books: {totalBookPrice:C}");
}

/*
Exercise 25: System.Xml.Linq
Question: Create an XML representation of the authors and books using LINQ to XML. Answer:
*/

var answer25 = {
    var authorsAndBooksXml = new XElement("Library",
        new XElement("Authors",
            authors.Select(author => new XElement("Author",
                new XAttribute("Id", author.AuthorId),
                new XElement("Name", author.Name),
                new XElement("Country", author.Country),
                new XElement("Books",
                    books.Where(b => b.AuthorId == author.AuthorId)
                        .Select(book => new XElement("Book",
                            new XAttribute("Id", book.BookId),
                            new XElement("Title", book.Title),
                            new XElement("PublicationYear", book.PublicationYear),
                            new XElement("Genre", book.Genre),
                            new XElement("Price", book.Price)
                        ))
                )
            ))
        )
    );
    Console.WriteLine(authorsAndBooksXml);

}

/*
Exercise 26: Building Element-Oriented XML
Question: Create an XML document for a collection of books, including book details, using LINQ to XML. Answer:
*/

var answer26 = {
    var booksXml = new XElement("Books",
        books.Select(book => new XElement("Book",
            new XAttribute("Id", book.BookId),
            new XElement("Title", book.Title),
            new XElement("AuthorId", book.AuthorId),
            new XElement("PublicationYear", book.PublicationYear),
            new XElement("Genre", book.Genre),
            new XElement("Price", book.Price)
        ))
    );
    Console.WriteLine(booksXml);

}

/*
Exercise 27: Functional Construction for Less Code
Question: Use functional construction to create an XML document for a collection of authors. Answer:
*/

var answer27 = {
    var authorsXml = new XElement("Authors",
        from author in authors
        select new XElement("Author",
            new XAttribute("Id", author.AuthorId),
            new XElement("Name", author.Name),
            new XElement("Country", author.Country)
        )
    );
    Console.WriteLine(authorsXml);

}

/*

Exercise 28: Load and Query XML with LINQ
Question: Load an XML document containing book data and query the titles of the books. Answer:
*/

var answer28 = {
    var xmlString = @"<Books>
        <Book Id='1'><Title>1984</Title><AuthorId>1</AuthorId><PublicationYear>1949</PublicationYear><Genre>Dystopian</Genre><Price>9.99</Price></Book>
        <Book Id='2'><Title>Harry Potter and the Philosopher's Stone</Title><AuthorId>2</AuthorId><PublicationYear>1997</PublicationYear><Genre>Fantasy</Genre><Price>8.99</Price></Book>
        <Book Id='3'><Title>The Shining</Title><AuthorId>3</AuthorId><PublicationYear>1977</PublicationYear><Genre>Horror</Genre><Price>7.99</Price></Book>
    </Books>";

    var booksDocument = XElement.Parse(xmlString);

    var bookTitles = booksDocument.Elements("Book")
                                .Select(book => book.Element("Title")?.Value);

    foreach (var title in bookTitles)
    {
        Console.WriteLine(title);
    }

}

/*
Exercise 29: Working with XML Namespace
Question: Add a namespace to an XML document and query elements using the namespace. Answer:
*/

var answer29 = {
    XNamespace ns = "http://example.com/books";
    var booksWithNamespace = new XElement(ns + "Books",
        books.Select(book => new XElement(ns + "Book",
            new XAttribute("Id", book.BookId),
            new XElement(ns + "Title", book.Title),
            new XElement(ns + "AuthorId", book.AuthorId),
            new XElement(ns + "PublicationYear", book.PublicationYear),
            new XElement(ns + "Genre", book.Genre),
            new XElement(ns + "Price", book.Price)
        ))
    );
    Console.WriteLine(booksWithNamespace);

    var titlesWithNamespace = booksWithNamespace.Elements(ns + "Book")
                                                .Select(book => book.Element(ns + "Title")?.Value);

    foreach (var title in titlesWithNamespace)
    {
        Console.WriteLine(title);
    }

}

/*
Exercise 30: Writing a Basic Query using LINQ
Question: Write a basic LINQ query to list all books ordered by their publication year. Answer:
*/

 var answer30 = {
    var orderedBooks = books.OrderBy(b => b.PublicationYear)
                        .Select(b => b.Title);

    foreach (var title in orderedBooks)
    {
        Console.WriteLine(title);
    }

}

/*
Exercise 31: Working with IQueryables and Expression Trees
Question: Use IQueryable and expression trees to dynamically build a LINQ query that filters books by genre. Answer:

*/

var answer31 = {
    public static IQueryable<Book> FilterBooksByGenre(IQueryable<Book> books, string genre)
    {
        var parameter = Expression.Parameter(typeof(Book), "book");
        var property = Expression.Property(parameter, "Genre");
        var constant = Expression.Constant(genre);
        var equality = Expression.Equal(property, constant);
        var lambda = Expression.Lambda<Func<Book, bool>>(equality, parameter);

        return books.Where(lambda);
    }

    // Example usage (assuming books is an IQueryable<Book>):
    var filteredBooks = FilterBooksByGenre(books.AsQueryable(), "Fantasy");

    foreach (var book in filteredBooks)
    {
        Console.WriteLine(book.Title);
    }

}

/*

Exercise 32: Caveats and Pitfalls of Remote LINQ
Question: Explain potential pitfalls of using LINQ with remote data sources (e.g., databases) and
write an example query demonstrating the issue. Answer:
*/

var answer32 = {
    // Potential pitfalls of using LINQ with remote data sources include:
    // 1. Deferred execution can lead to unexpected query execution when iterating over results.
    // 2. LINQ queries may be translated to inefficient SQL queries by ORMs (e.g., Entity Framework).
    // 3. Overusing complex LINQ queries can lead to performance issues and hard-to-maintain code.

    using (var context = new BookContext())
    {
        // Example of a potentially inefficient query:
        var booksByAuthor = context.Books
                                .Where(b => b.AuthorId == 1)
                                .OrderByDescending(b => b.PublicationYear)
                                .Select(b => new { b.Title, b.PublicationYear })
                                .ToList();

        // The query above might be translated into an inefficient SQL query by the ORM.
        foreach (var book in booksByAuthor)
        {
            Console.WriteLine($"{book.Title} ({book.PublicationYear})");
        }
    }

}

/*

Exercise 33: Advanced LINQ Queries
Question: Write an advanced LINQ query that groups books by decade and lists the number of books published in each decade. Answer:

*/

 var answer33 = {
    var booksByDecade = books.GroupBy(b => (b.PublicationYear / 10) * 10)
                         .Select(group => new { Decade = group.Key, Count = group.Count() });

    foreach (var group in booksByDecade)
    {
        Console.WriteLine($"{group.Decade}s: {group.Count} books");
    }

 }


